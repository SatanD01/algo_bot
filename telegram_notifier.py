import requests
import logging
from datetime import datetime
from config import TELEGRAM_BOT_TOKEN, TELEGRAM_CHAT_ID
import os

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logger = logging.getLogger(__name__)

class TelegramNotifier:
    def __init__(self, bot_token=TELEGRAM_BOT_TOKEN, chat_id=TELEGRAM_CHAT_ID):
        """
        –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –Ω–æ—Ç–∏—Ñ–∏–∫–∞—Ç–æ—Ä–∞ Telegram
        
        –ü–∞—Ä–∞–º–µ—Ç—Ä—ã:
        bot_token (str): –¢–æ–∫–µ–Ω –±–æ—Ç–∞ Telegram
        chat_id (str): ID —á–∞—Ç–∞ –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏–π
        """
        self.bot_token = bot_token
        self.chat_id = chat_id
        self.enabled = False
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ —Ç–æ–∫–µ–Ω–∞ –∏ chat_id
        if bot_token and chat_id:
            self.enabled = True
        else:
            logger.warning("Telegram-—É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ—Ç–∫–ª—é—á–µ–Ω—ã. –ù–µ —É–∫–∞–∑–∞–Ω —Ç–æ–∫–µ–Ω –±–æ—Ç–∞ –∏–ª–∏ ID —á–∞—Ç–∞.")
    
    def send_message(self, message, disable_notification=False):
        """
        –û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ Telegram
        
        –ü–∞—Ä–∞–º–µ—Ç—Ä—ã:
        message (str): –¢–µ–∫—Å—Ç —Å–æ–æ–±—â–µ–Ω–∏—è
        disable_notification (bool): –û—Ç–∫–ª—é—á–∏—Ç—å –∑–≤—É–∫–æ–≤–æ–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ
        
        –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç:
        bool: True –≤ —Å–ª—É—á–∞–µ —É—Å–ø–µ—Ö–∞, False –≤ —Å–ª—É—á–∞–µ –æ—à–∏–±–∫–∏
        """
        if not self.enabled:
            logger.debug("Telegram-—É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ—Ç–∫–ª—é—á–µ–Ω—ã.")
            return False
        
        try:
            url = f"https://api.telegram.org/bot{self.bot_token}/sendMessage"
            params = {
                "chat_id": self.chat_id,
                "text": message,
                "parse_mode": "HTML",
                "disable_notification": disable_notification
            }
            
            response = requests.post(url, data=params, timeout=10)
            
            if response.status_code == 200:
                logger.debug(f"Telegram-—É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ —É—Å–ø–µ—à–Ω–æ")
                return True
            else:
                logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ Telegram-—É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è: {response.status_code} - {response.text}")
                return False
                
        except Exception as e:
            logger.error(f"–ò—Å–∫–ª—é—á–µ–Ω–∏–µ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ Telegram-—É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è: {str(e)}")
            return False
    
    def send_trade_open_notification(self, trade_info):
        """
        –û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ–± –æ—Ç–∫—Ä—ã—Ç–∏–∏ —Å–¥–µ–ª–∫–∏
        
        –ü–∞—Ä–∞–º–µ—Ç—Ä—ã:
        trade_info (dict): –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ —Å–¥–µ–ª–∫–µ
        
        –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç:
        bool: True –≤ —Å–ª—É—á–∞–µ —É—Å–ø–µ—Ö–∞, False –≤ —Å–ª—É—á–∞–µ –æ—à–∏–±–∫–∏
        """
        if not self.enabled:
            return False
        
        try:
            # –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º –¥–∞–Ω–Ω—ã–µ
            symbol = trade_info.get('symbol', 'Unknown')
            order_type = trade_info.get('order', 'Unknown').upper()
            entry_price = trade_info.get('entry_price', 0)
            stop_loss = trade_info.get('sl', 0)
            take_profit = trade_info.get('tp', 0)
            lot_size = trade_info.get('lot_size', 0)
            setup = trade_info.get('setup', 'Standard')
            
            # –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ–º —Ä–∏—Å–∫ –∏ –ø–æ—Ç–µ–Ω—Ü–∏–∞–ª—å–Ω—É—é –ø—Ä–∏–±—ã–ª—å –≤ –ø–∏–ø—Å–∞—Ö
            sl_pips = abs(entry_price - stop_loss) / 0.0001
            tp_pips = abs(entry_price - take_profit) / 0.0001
            
            # –§–æ—Ä–º–∏—Ä—É–µ–º —Ç–µ–∫—Å—Ç —Å–æ–æ–±—â–µ–Ω–∏—è
            message = (
                f"üîî <b>–û–¢–ö–†–´–¢–ê –ù–û–í–ê–Ø –°–î–ï–õ–ö–ê</b> üîî\n\n"
                f"<b>–°–∏–º–≤–æ–ª:</b> {symbol}\n"
                f"<b>–¢–∏–ø:</b> {order_type}\n"
                f"<b>–¶–µ–Ω–∞ –≤—Ö–æ–¥–∞:</b> {entry_price:.5f}\n"
                f"<b>–°—Ç–æ–ø-–ª–æ—Å—Å:</b> {stop_loss:.5f} ({sl_pips:.0f} –ø–∏–ø—Å–æ–≤)\n"
                f"<b>–¢–µ–π–∫-–ø—Ä–æ—Ñ–∏—Ç:</b> {take_profit:.5f} ({tp_pips:.0f} –ø–∏–ø—Å–æ–≤)\n"
                f"<b>–û–±—ä–µ–º:</b> {lot_size:.2f} –ª–æ—Ç\n"
                f"<b>–°–µ—Ç–∞–ø:</b> {setup}\n"
                f"<b>–í—Ä–µ–º—è:</b> {datetime.now().strftime('%Y-%m-%d %H:%M:%S')}"
            )
            
            return self.send_message(message)
            
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —Ñ–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–∏–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ–± –æ—Ç–∫—Ä—ã—Ç–∏–∏ —Å–¥–µ–ª–∫–∏: {str(e)}")
            return False
    
    def send_trade_close_notification(self, trade_info):
        """
        –û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ –∑–∞–∫—Ä—ã—Ç–∏–∏ —Å–¥–µ–ª–∫–∏
        
        –ü–∞—Ä–∞–º–µ—Ç—Ä—ã:
        trade_info (dict): –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ —Å–¥–µ–ª–∫–µ
        
        –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç:
        bool: True –≤ —Å–ª—É—á–∞–µ —É—Å–ø–µ—Ö–∞, False –≤ —Å–ª—É—á–∞–µ –æ—à–∏–±–∫–∏
        """
        if not self.enabled:
            return False
        
        try:
            # –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º –¥–∞–Ω–Ω—ã–µ
            symbol = trade_info.get('symbol', 'Unknown')
            order_type = trade_info.get('order', 'Unknown').upper()
            entry_price = trade_info.get('entry_price', 0)
            exit_price = trade_info.get('exit_price', 0)
            profit = trade_info.get('profit', 0)
            result = trade_info.get('result', 'Unknown')
            exit_type = trade_info.get('exit_type', 'Unknown')
            
            # –û–ø—Ä–µ–¥–µ–ª—è–µ–º —ç–º–æ–¥–∑–∏ –Ω–∞ –æ—Å–Ω–æ–≤–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞
            emoji = "‚úÖ" if result == 'win' else "‚ùå"
            result_text = "–í–´–ò–ì–†–´–®" if result == 'win' else "–ü–†–û–ò–ì–†–´–®"
            
            # –§–æ—Ä–º–∏—Ä—É–µ–º —Ç–µ–∫—Å—Ç —Å–æ–æ–±—â–µ–Ω–∏—è
            message = (
                f"{emoji} <b>–°–î–ï–õ–ö–ê –ó–ê–ö–†–´–¢–ê - {result_text}</b> {emoji}\n\n"
                f"<b>–°–∏–º–≤–æ–ª:</b> {symbol}\n"
                f"<b>–¢–∏–ø:</b> {order_type}\n"
                f"<b>–¶–µ–Ω–∞ –≤—Ö–æ–¥–∞:</b> {entry_price:.5f}\n"
                f"<b>–¶–µ–Ω–∞ –≤—ã—Ö–æ–¥–∞:</b> {exit_price:.5f}\n"
                f"<b>–ü—Ä–∏–±—ã–ª—å:</b> {profit:.2f}\n"
                f"<b>–¢–∏–ø –≤—ã—Ö–æ–¥–∞:</b> {exit_type}\n"
                f"<b>–í—Ä–µ–º—è:</b> {datetime.now().strftime('%Y-%m-%d %H:%M:%S')}"
            )
            
            return self.send_message(message)
            
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —Ñ–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–∏–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ –∑–∞–∫—Ä—ã—Ç–∏–∏ —Å–¥–µ–ª–∫–∏: {str(e)}")
            return False

# –ï–¥–∏–Ω—Å—Ç–≤–µ–Ω–Ω—ã–π —ç–∫–∑–µ–º–ø–ª—è—Ä –Ω–æ—Ç–∏—Ñ–∏–∫–∞—Ç–æ—Ä–∞ –¥–ª—è –≤—Å–µ–≥–æ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è
notifier = None

def initialize_telegram_notifier(bot_token=TELEGRAM_BOT_TOKEN, chat_id=TELEGRAM_CHAT_ID):
    """
    –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ—Ç –≥–ª–æ–±–∞–ª—å–Ω—ã–π —ç–∫–∑–µ–º–ø–ª—è—Ä Telegram-–Ω–æ—Ç–∏—Ñ–∏–∫–∞—Ç–æ—Ä–∞
    
    –ü–∞—Ä–∞–º–µ—Ç—Ä—ã:
    bot_token (str): –¢–æ–∫–µ–Ω –±–æ—Ç–∞ Telegram
    chat_id (str): ID —á–∞—Ç–∞ –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏–π
    
    –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç:
    TelegramNotifier: –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—ã–π –Ω–æ—Ç–∏—Ñ–∏–∫–∞—Ç–æ—Ä
    """
    global notifier
    
    # –ï—Å–ª–∏ —Ç–æ–∫–µ–Ω –∏ —á–∞—Ç –Ω–µ —É–∫–∞–∑–∞–Ω—ã, –ø—Ä–æ–±—É–µ–º –∑–∞–≥—Ä—É–∑–∏—Ç—å –∏–∑ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è
    if not bot_token:
        bot_token = os.environ.get('TELEGRAM_BOT_TOKEN')
    
    if not chat_id:
        chat_id = os.environ.get('TELEGRAM_CHAT_ID')
    
    notifier = TelegramNotifier(bot_token, chat_id)
    return notifier

def get_notifier():
    """
    –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –≥–ª–æ–±–∞–ª—å–Ω—ã–π —ç–∫–∑–µ–º–ø–ª—è—Ä –Ω–æ—Ç–∏—Ñ–∏–∫–∞—Ç–æ—Ä–∞, –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É—è –µ–≥–æ –ø—Ä–∏ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ—Å—Ç–∏
    
    –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç:
    TelegramNotifier: –≠–∫–∑–µ–º–ø–ª—è—Ä –Ω–æ—Ç–∏—Ñ–∏–∫–∞—Ç–æ—Ä–∞
    """
    global notifier
    if notifier is None:
        notifier = initialize_telegram_notifier()
    return notifier

# –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ —Ñ–∞–π–ª–∞ –Ω–∞–ø—Ä—è–º—É—é
if __name__ == "__main__":
    logging.basicConfig(level=logging.INFO, 
                        format="%(asctime)s [%(levelname)s] %(name)s: %(message)s")
    
    # –¢–µ—Å—Ç–∏—Ä—É–µ–º –æ—Ç–ø—Ä–∞–≤–∫—É —Å–æ–æ–±—â–µ–Ω–∏–π, –µ—Å–ª–∏ —Ç–æ–∫–µ–Ω –∏ —á–∞—Ç —É–∫–∞–∑–∞–Ω—ã –≤ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è
    test_notifier = get_notifier()
    
    if test_notifier.enabled:
        print("–¢–µ—Å—Ç –æ—Ç–ø—Ä–∞–≤–∫–∏ –ø—Ä–æ—Å—Ç–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è...")
        test_notifier.send_message("–¢–µ—Å—Ç–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç AlgoTrade –±–æ—Ç–∞")
        
        print("–¢–µ—Å—Ç –æ—Ç–ø—Ä–∞–≤–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ–± –æ—Ç–∫—Ä—ã—Ç–∏–∏ —Å–¥–µ–ª–∫–∏...")
        test_trade_open = {
            'symbol': 'EURUSD',
            'order': 'buy',
            'entry_price': 1.12345,
            'sl': 1.12245,
            'tp': 1.12545,
            'lot_size': 0.1,
            'setup': 'OrderBlock'
        }
        test_notifier.send_trade_open_notification(test_trade_open)
        
        print("–¢–µ—Å—Ç –æ—Ç–ø—Ä–∞–≤–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ –∑–∞–∫—Ä—ã—Ç–∏–∏ —Å–¥–µ–ª–∫–∏...")
        test_trade_close = {
            'symbol': 'EURUSD',
            'order': 'buy',
            'entry_price': 1.12345,
            'exit_price': 1.12545,
            'profit': 20.0,
            'result': 'win',
            'exit_type': 'take_profit'
        }
        test_notifier.send_trade_close_notification(test_trade_close)
        
        print("–¢–µ—Å—Ç—ã –∑–∞–≤–µ—Ä—à–µ–Ω—ã")
    else:
        print("Telegram-–Ω–æ—Ç–∏—Ñ–∏–∫–∞—Ç–æ—Ä –Ω–µ –≤–∫–ª—é—á–µ–Ω. –£–∫–∞–∂–∏—Ç–µ TELEGRAM_BOT_TOKEN –∏ TELEGRAM_CHAT_ID –≤ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è.")